{\rtf1\ansi\ansicpg1252\cocoartf2707
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww12500\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 %\{\
\
	#include <stdbool.h>		\
	#include <stdlib.h>\
	#include <string.h>\
	#include <stdio.h>\
	\
	int numLines = 1;\
%\}\
tGET			\\"Get\\"\
tSET			\\"Set\\"\
tFUNCTION	\\"Function\\"\
tPRINT		\\"Print\\"\
tFOR		\\"For\\"\
tIF			\\"If\\"\
tRETURN		\\"Return\\"\
tCOMMA		\\,\
tPLUS		\\"\\+\\"\
tMUL		\\"\\*\\"\
tINC			\\"\\+\\+\\"\
tLBRAC		\\[\
tGT			\\"\\>\\"\
tGEQ		\\"\\>\\=\\"\
tEQUALITY	\\"\\=\\=\\"\
tMINUS		\\"\\-\\"\
tDIV			\\"\\/\\"\
tDEC		\\"\\-\\-\\"\
tRBRAC		\\]\
tLT			\\"\\<\\"\
tLEQ			\\"\\<\\=\\"
\f1\fs26 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 tIDENT		\\"[_a-zA-Z][_a-zA-Z0-9]*\\"
\f0\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 tNUM		(-[0-9]+\\.[0-9]+)|(-[0-9]+)|([0-9]+\\.[0-9]+)|([0-9]+)\
tSTRING		\\'[^']*\\'\
\
%%\
\\n			numLines++;\
\{tGET\}		printf("%d %s\\n", numLines, "tGET");\
\{tSET\}		printf("%d %s\\n", numLines, "tSET");\
\{tFUNCTION\}	printf("%d %s\\n", numLines, "tFUNCTION");\
\{tPRINT\}		printf("%d %s\\n", numLines, "tPRINT");\
\{tFOR\}		printf("%d %s\\n", numLines, "tFOR");\
\{tIF\}			printf("%d %s\\n", numLines, "tIF");\
\{tRETURN\}	printf("%d %s\\n", numLines, "tRETURN");\
\{tCOMMA\}	printf("%d %s\\n", numLines, "tCOMMA");\
\{tPLUS\}		printf("%d %s\\n", numLines, "tPLUS");\
\{tMUL\}		printf("%d %s\\n", numLines, "tMUL");\
\{tINC\}		printf("%d %s\\n", numLines, "tINC");\
\{tLBRAC\}		printf("%d %s\\n", numLines, "tLBRAC");\
\{tGT\}			printf("%d %s\\n", numLines, "tGT");\
\{tGEQ\}		printf("%d %s\\n", numLines, "tGEQ");\
\{tEQUALITY\}	printf("%d %s\\n", numLines, "tEQUALITY");\
\{tMINUS\}		printf("%d %s\\n", numLines, "tMINUS");\
\{tDIV\}		printf("%d %s\\n", numLines, "tDIV");\
\{tDEC\}		printf("%d %s\\n", numLines, "tDEC");\
\{tRBRAC\}		printf("%d %s\\n", numLines, "tRBRAC");\
\{tLT\}			printf("%d %s\\n", numLines, "tLT");\
\{tLEQ\}		printf("%d %s\\n", numLines, "tLEQ");\
\
\{tIDENT\}		\{\
			char subtext[yyleng-1];\
			memcpy(subtext, &yytext[1], yyleng-2);\
			subtext[yyleng-2] = '\\0';\
			printf("%d %s (%s)\\n", numLines, "tIDENT", subtext);\
			\}\
\
\{tNUM\}		\{	\
			bool dash = false;\
			bool dot = false;\
			int startPos = 0;\
			// check if the number is negative\
			if (yytext[startPos] == '-')\
			\{\
				startPos ++;\
				dash = true;\
			\}\
			\
			// if there is a dot, the number might be real\
			int pos;\
			for (pos = startPos; dot==false &&  pos < yyleng; pos++)\
			\{\
				if (yytext[pos] == '.') dot = true;\
			\}\
		\
			while(yytext[startPos] == '0' && (yytext[startPos+1] != '.' && yytext[startPos+1] != '\\0')) startPos++;\
			\
			int endPos;\
			if (dot == true)\
			\{\
				endPos = yyleng - 1;\
				while(yytext[endPos] == '0' && yytext[endPos-1] != '.') endPos--;\
			\}\
			else\
			\{\
				endPos = yyleng -1;\
			\}\
			\
			char subtext[yyleng];\
			if (dash == true)\
			\{\
				subtext[0] = '-';\
				int i = 0;\
				for (; i < endPos-startPos+1; i++) subtext[i+1] = yytext[startPos +i];\
				subtext[endPos-startPos +2] = '\\0';\
			\}			\
			else\
			\{\
				memcpy(subtext, &yytext[startPos], endPos-startPos +1);\
				subtext[endPos-startPos+1] = '\\0';\
			\}\
\
			//for (pos=0; pos < sizeof(subtext); pos++) printf("%c\\n", subtext[pos]);\
\
			printf("%d %s (%s) (%s)\\n", numLines, "tNUM", yytext, subtext);\
			\}\
\
\{tSTRING\}		\{	\
			int DecreaseNum=0;\
			int pos;\
			for (pos=0; pos < yyleng; pos++)\
			\{\
				if (yytext[pos] == '\\n')\
				\{\
					DecreaseNum ++;\
					numLines++;\
				\}\
			\}\
			char subtext[yyleng-1];\
			memcpy(subtext, &yytext[1], yyleng-2);\
			subtext[yyleng-2] = '\\0';\
			printf("%d %s (%s)\\n", numLines - DecreaseNum, "tSTRING", subtext);\
			\}\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\fs26 \cf0 [ \\t\\\\n]; 
\f0\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
. 	\{ 	\
		printf("%d Illegal character: (%c)\\n\'94, numLines, yytext[0]); \
	\}\
\
%%\
int main()\
\{\
	yylex();\
\}}